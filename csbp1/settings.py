"""
Django settings for csbp1 project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-79snw$r9^dhggt-gf2zz@=@s6^10)0jp$t5zz1pr=czmz33#_&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'abilityhub.apps.AbilityhubConfig',
    'chamberofsecrets.apps.ChamberofsecretsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csbp1.middleware.InteractionIDMiddleware',
]

ROOT_URLCONF = 'csbp1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'abilityhub.utils.context_processors.person_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'csbp1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Helsinki'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'abilityhub:login'

LOGIN_REDIRECT_URL = 'abilityhub:home'

LOGGING_CONSOLE_ONLY = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "csbp1.log_formatter.UTCJsonFormatter",
            "format": "%(asctime)s %(interaction_id)s %(application)s %(code_location)s %(user)s %(event_type)s %(event_code)s %(levelname)s %(description)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler"
        },
        "json_console": {
            "class": "logging.StreamHandler",
            "formatter": "json"
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "WARNING" 
        },
        "custom_logger": {
            "handlers": ["json_console"],
            "level": "WARNING",
            "propagate": False
        }
    },
}

LOGGING_BAD = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "csbp1.log_formatter.UTCJsonFormatter",
            "format": "%(asctime)s %(interaction_id)s %(application)s %(code_location)s %(user)s %(event_type)s %(event_code)s %(levelname)s %(description)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler"
        },
        "json_console": {
            "class": "logging.StreamHandler",
            "formatter": "json"
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "csbp1/logs/logs.json",
            "formatter": "json"
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "WARNING" 
        },
        "custom_logger": {
            "handlers": ["json_console", "file"],
            "level": "WARNING",
            "propagate": False
        }
    },
}

LOGGING_GOOD = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "csbp1.log_formatter.UTCJsonFormatter",
            "format": "%(asctime)s %(interaction_id)s %(application)s %(code_location)s %(user)s %(event_type)s %(event_code)s %(levelname)s %(description)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler"
        },
        "json_console": {
            "class": "logging.StreamHandler",
            "formatter": "json"
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "csbp1/logs/logs.json",
            "formatter": "json"
        },
        "db": {
            "class": "abilityhub.handlers.DatabaseLogHandler",
            "formatter": "json"
        }
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "WARNING" 
        },
        "custom_logger": {
            "handlers": ["json_console", "file", "db"],
            "level": "WARNING",
            "propagate": False
        }
    },
}

LOGGING = LOGGING_CONSOLE_ONLY
#LOGGING = LOGGING_BAD
#LOGGING = LOGGING_GOOD